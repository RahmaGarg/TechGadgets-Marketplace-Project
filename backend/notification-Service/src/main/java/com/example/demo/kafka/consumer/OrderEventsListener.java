package com.example.demo.kafka.consumer;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

import com.example.demo.dtos.NotificationRequest;
import com.example.demo.enums.NotificationType;
import com.example.demo.events.OrderCancelledEvent;
import com.example.demo.events.OrderConfirmedEvent;
import com.example.demo.events.OrderCreatedEvent;
import com.example.demo.events.OrderDeliveredEvent;
import com.example.demo.events.OrderShippedEvent;
import com.example.demo.service.NotificationService;

@Component
@RequiredArgsConstructor
@Slf4j
public class OrderEventsListener {

    private final NotificationService notificationService;

    @KafkaListener(topics = "order-created", groupId = "notification-service-group")
    public void handleOrderCreated(OrderCreatedEvent event) {
        log.info("üì¨ Received OrderCreatedEvent for orderId: {}", event.getOrderId());
        
        try {
            // Notification CLIENT
            NotificationRequest clientNotif = NotificationRequest.builder()
                    .userId(event.getClientId())
                    .userRole("CLIENT")
                    .type(NotificationType.ORDER_CREATED)
                    .title("üõí Commande cr√©√©e")
                    .message(String.format("Votre commande #%d a √©t√© cr√©√©e avec succ√®s. Montant total: %.2f DT. En attente de paiement.", 
                            event.getOrderId(), event.getTotalAmount()))
                    .metadata(String.format("{\"orderId\":%d,\"totalAmount\":%.2f,\"itemCount\":%d}", 
                            event.getOrderId(), event.getTotalAmount(), event.getItems().size()))
                    .build();
            
            notificationService.createNotification(clientNotif);
            log.info("‚úÖ Client notification sent for order: {}", event.getOrderId());
        } catch (Exception e) {
            log.error("‚ùå Error handling OrderCreatedEvent: {}", e.getMessage(), e);
        }
    }

    @KafkaListener(topics = "order-confirmed", groupId = "notification-service-group")
    public void handleOrderConfirmed(OrderConfirmedEvent event) {
        log.info("üì¨ Received OrderConfirmedEvent for orderId: {}", event.getOrderId());
        
        try {
            // Notification SELLER
            NotificationRequest sellerNotif = NotificationRequest.builder()
                    .userId(event.getSellerId())
                    .userRole("SELLER")
                    .type(NotificationType.NEW_ORDER)
                    .title("üéâ Nouvelle commande confirm√©e")
                    .message(String.format("Commande #%d confirm√©e et pay√©e. Pr√©parez l'exp√©dition rapidement!", 
                            event.getOrderId()))
                    .metadata(String.format("{\"orderId\":%d,\"clientId\":%d}", 
                            event.getOrderId(), event.getClientId()))
                    .build();
            
            notificationService.createNotification(sellerNotif);
            log.info("‚úÖ Seller notification sent for confirmed order: {}", event.getOrderId());
        } catch (Exception e) {
            log.error("‚ùå Error handling OrderConfirmedEvent: {}", e.getMessage(), e);
        }
    }

    @KafkaListener(topics = "order-shipped", groupId = "notification-service-group")
    public void handleOrderShipped(OrderShippedEvent event) {
        log.info("üì¨ Received OrderShippedEvent for orderId: {}", event.getOrderId());
        
        try {
            // Notification CLIENT
            NotificationRequest clientNotif = NotificationRequest.builder()
                    .userId(event.getClientId())
                    .userRole("CLIENT")
                    .type(NotificationType.ORDER_SHIPPED)
                    .title("üì¶ Colis exp√©di√©")
                    .message(String.format("Votre commande #%d a √©t√© exp√©di√©e! N¬∞ de suivi: %s. Livraison estim√©e: %s", 
                            event.getOrderId(), 
                            event.getTrackingNumber(),
                            event.getEstimatedDelivery() != null ? event.getEstimatedDelivery().toString() : "Non sp√©cifi√©e"))
                    .metadata(String.format("{\"orderId\":%d,\"trackingNumber\":\"%s\"}", 
                            event.getOrderId(), event.getTrackingNumber()))
                    .build();
            
            notificationService.createNotification(clientNotif);
            log.info("‚úÖ Client notification sent for shipped order: {}", event.getOrderId());
        } catch (Exception e) {
            log.error("‚ùå Error handling OrderShippedEvent: {}", e.getMessage(), e);
        }
    }

    @KafkaListener(topics = "order-delivered", groupId = "notification-service-group")
    public void handleOrderDelivered(OrderDeliveredEvent event) {
        log.info("üì¨ Received OrderDeliveredEvent for orderId: {}", event.getOrderId());
        
        try {
            // Notification CLIENT
            NotificationRequest clientNotif = NotificationRequest.builder()
                    .userId(event.getClientId())
                    .userRole("CLIENT")
                    .type(NotificationType.ORDER_DELIVERED)
                    .title("‚úÖ Colis livr√©")
                    .message(String.format("Commande #%d livr√©e avec succ√®s! N'oubliez pas de laisser un avis sur les produits.", 
                            event.getOrderId()))
                    .metadata(String.format("{\"orderId\":%d}", event.getOrderId()))
                    .build();
            
            notificationService.createNotification(clientNotif);
            
            // Notification SELLER
            NotificationRequest sellerNotif = NotificationRequest.builder()
                    .userId(event.getSellerId())
                    .userRole("SELLER")
                    .type(NotificationType.ORDER_DELIVERED_SELLER)
                    .title("‚úÖ Commande livr√©e")
                    .message(String.format("Commande #%d livr√©e avec succ√®s au client.", 
                            event.getOrderId()))
                    .metadata(String.format("{\"orderId\":%d,\"clientId\":%d}", 
                            event.getOrderId(), event.getClientId()))
                    .build();
            
            notificationService.createNotification(sellerNotif);
            log.info("‚úÖ Notifications sent for delivered order: {}", event.getOrderId());
        } catch (Exception e) {
            log.error("‚ùå Error handling OrderDeliveredEvent: {}", e.getMessage(), e);
        }
    }

    @KafkaListener(topics = "order-cancelled", groupId = "notification-service-group")
    public void handleOrderCancelled(OrderCancelledEvent event) {
        log.info("üì¨ Received OrderCancelledEvent for orderId: {}", event.getOrderId());
        
        try {
            // Notification CLIENT
            NotificationRequest clientNotif = NotificationRequest.builder()
                    .userId(event.getClientId())
                    .userRole("CLIENT")
                    .type(NotificationType.ORDER_CANCELLED)
                    .title("‚ùå Commande annul√©e")
                    .message(String.format("Commande #%d annul√©e. Raison: %s", 
                            event.getOrderId(), event.getCancellationReason()))
                    .metadata(String.format("{\"orderId\":%d,\"reason\":\"%s\"}", 
                            event.getOrderId(), event.getCancellationReason()))
                    .build();
            
            notificationService.createNotification(clientNotif);
            
            // Notification SELLER
            NotificationRequest sellerNotif = NotificationRequest.builder()
                    .userId(event.getSellerId())
                    .userRole("SELLER")
                    .type(NotificationType.ORDER_CANCELLED_BY_CLIENT)
                    .title("‚ùå Commande annul√©e")
                    .message(String.format("Commande #%d annul√©e par le client. Raison: %s", 
                            event.getOrderId(), event.getCancellationReason()))
                    .metadata(String.format("{\"orderId\":%d,\"reason\":\"%s\",\"clientId\":%d}", 
                            event.getOrderId(), event.getCancellationReason(), event.getClientId()))
                    .build();
            
            notificationService.createNotification(sellerNotif);
            log.info("‚úÖ Notifications sent for cancelled order: {}", event.getOrderId());
        } catch (Exception e) {
            log.error("‚ùå Error handling OrderCancelledEvent: {}", e.getMessage(), e);
        }
    }
}